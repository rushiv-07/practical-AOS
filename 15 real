#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/wait.h>
#include <sys/types.h>
pid_t child_pid;
void sigchld_handler(int sig) {
    int status;
 
    if (waitpid(child_pid, &status, WNOHANG) > 0) {
        if (WIFEXITED(status)) {
            printf("Child process exited with status %d\n", WEXITSTATUS(status));
        } else if (WIFSIGNALED(status)) {
            printf("Child process terminated by signal %d\n", WTERMSIG(status));
        }
    }
}

void sigalrm_handler(int sig) {
    printf("Alarm signal received: 5 seconds timeout reached!\n");
    if (child_pid > 0) {
        kill(child_pid, SIGKILL);
        printf("Child process killed due to timeout\n");
    }
}

int main() {
    struct sigaction sa_sigchld, sa_sigalrm;

    sa_sigchld.sa_handler = sigchld_handler;
    sa_sigchld.sa_flags = SA_RESTART;
    sigemptyset(&sa_sigchld.sa_mask);
    sigaction(SIGCHLD, &sa_sigchld, NULL);

    sa_sigalrm.sa_handler = sigalrm_handler;
    sa_sigalrm.sa_flags = SA_RESTART;
    sigemptyset(&sa_sigalrm.sa_mask);
    sigaction(SIGALRM, &sa_sigalrm, NULL);
    child_pid = fork();

    if (child_pid < 0) {
        perror("Fork failed");
        exit(1);
    }

    if (child_pid == 0) {
        printf("Child process: Executing a command (e.g., sleep 10)\n");
        execlp("sleep", "sleep", "10", NULL);
    } else {
       
        printf("Parent process: Setting an alarm for 5 seconds...\n");
        alarm(5); 
        pause(); 

        printf("Parent process exiting...\n");
    }

    return 0;
}
